using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using TE.VVVV.Plugins.Common;
using VVVV.PluginInterfaces.V1;
using VVVV.PluginInterfaces.V2;

namespace TE.VVVV.Plugins
{

	#region StrSplitPlugin

	public class StrSplitPlugin : IPlugin
	{

		#region Static / Constant

		public static IPluginInfo PluginInfo
		{
			get
			{
				return
					new PluginInfo
					{
						Name = "StrSplit",
						Category = "String",
						Help = "Split strings based on characters",
						Author = "TE",
						Bugs=String.Empty,
						Warnings=String.Empty,
						Credits=String.Empty,
						Class = typeof(StrSplitPlugin).Name,
						Namespace = typeof(StrSplitPlugin).Namespace
					};
			}
		}

		#endregion

		#region Fields

		private IStringIn _InputIn;
		private IStringIn _SeparatorsIn;
		private IEnumIn _ModeIn;
		private string _Input;
		private string[] _Separators;
		private StringSplitOptions _Mode;
		private bool _Invalidate;
		private IStringOut _OutputOut;

		#endregion

		#region Properties

		#endregion

		#region Constructors

		#endregion

		#region Methods

		#endregion

		#region IPlugin Members

		public bool AutoEvaluate
		{
			get { return false; }
		}

		public void Configurate(IPluginConfig input)
		{
		}

		public void Evaluate(int spreadMax)
		{
			if(_SeparatorsIn.PinIsChanged)
			{
				_Separators = _SeparatorsIn.GetAllStrings();
				_Invalidate = true;
			}
			if(_ModeIn.PinIsChanged)
			{
				int mode;
				_ModeIn.GetOrd(0, out mode);
				_Mode = (StringSplitOptions)Enum.ToObject(typeof(StringSplitOptions), mode);
				_Invalidate = true;
			}
			if(_Invalidate || _InputIn.PinIsChanged)
			{
				_InputIn.GetString(0, out _Input);
				if(_Input == null)
					_Input = String.Empty;
				var parts = _Input.Split(_Separators, _Mode);
				_OutputOut.SliceCount = parts.Length;
				_OutputOut.SetAllStrings(parts);
				_Invalidate = false;
			}
		}

		public void SetPluginHost(IPluginHost host)
		{
			host.RegisterEnum(null, StringSplitOptions.None);
			//_InputIn = host.CreateNewStringInput("Input", TSliceMode.Single);
			host.CreateStringInput("Input", TSliceMode.Single, TPinVisibility.True, out _InputIn);
			_InputIn.SetSubType(String.Empty, false);
			//_SeparatorsIn = host.CreateNewStringInput("Separators");
			host.CreateStringInput("Separators", TSliceMode.Dynamic, TPinVisibility.True, out _SeparatorsIn);
			_SeparatorsIn.SetSubType(String.Empty, false);
			//_ModeIn = host.CreateNewEnumInput<StringSplitOptions>("Mode", TSliceMode.Single);
			host.CreateEnumInput("Mode", TSliceMode.Single, TPinVisibility.True, out _ModeIn);
			_ModeIn.SetSubType(typeof(StringSplitOptions).Name);
			//_OutputOut = host.CreateNewStringOutput("Output");
			host.CreateStringOutput("Output", TSliceMode.Dynamic, TPinVisibility.True, out _OutputOut);
			_OutputOut.SetSubType(String.Empty, false);
		}

		#endregion

	}

	#endregion

}
